plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
}

group = 'devy.americano.backend'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
	implementation 'org.xerial:sqlite-jdbc:3.39.3.0'
	implementation 'com.rometools:rome:1.18.0'
	implementation 'org.jsoup:jsoup:1.15.3'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks {
	processResources {
		duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

/**
 * local, test 등 프로파일 설정 분리
 * bootRun, build 등의 tast 실행시 설정하는 profile
 * ex) $ ./gradlew build -Pprofile=test
 */
ext.profile = (!project.hasProperty('profile') || !profile) ? '' : profile
sourceSets {
	String profile = "${profile}";
	String resourcesPath = "src/main/resources/"
	String testResourcesPath = "src/main/resources/"

	if(profile != 'local') {
		resourcesPath = "src/main/resources-${profile}/";
		testResourcesPath = "src/main/resources-${profile}/";
	}

	main {
		resources {
			srcDirs resourcesPath
		}
	}
	test {
		resources {
			srcDirs testResourcesPath
		}
	}
}

/**
 * 빌드 과정에서 version을 지정한다
 */
build {
	System.out.println("building for [${profile}] application.properties");
	version =  "${profile}-${version}"
}